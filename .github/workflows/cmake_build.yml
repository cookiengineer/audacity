name: CMake Build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Linux (x86_64) - Ubuntu 20.04
          os: ubuntu-20.04
          arch: x86_64
          vcpkg_triplet: x64-linux
          CMAKE_GENERATOR: Ninja

        - name: macOS (Intel) - Big Sur 11
          os: macos-11
          arch: Intel
          vcpkg_triplet: x64-osx-10.12min
          CMAKE_GENERATOR: Ninja

        - name: macOS (Intel) - Catalina 10.15
          os: macos-10.15
          arch: Intel
          vcpkg_triplet: x64-osx-10.12min
          CMAKE_GENERATOR: Ninja

        - name: Windows (amd64) -  Windows Server 2019
          os: windows-2019
          arch: amd64
          vcpkg_triplet: x64-windows
          CMAKE_GENERATOR: Visual Studio 16 2019
          CMAKE_GENERATOR_PLATFORM: x64

        - name: Windows (win32) - Windows Server 2019
          os: windows-2019
          arch: x86
          vcpkg_triplet: x86-windows
          CMAKE_GENERATOR: Visual Studio 16 2019
          CMAKE_GENERATOR_PLATFORM: win32


    env:

      AUDACITY_ARCH_LABEL: ${{ matrix.config.arch }}
      MACOSX_DEPLOYMENT_TARGET: 10.12

      # CMake settings
      CMAKE_BUILD_TYPE: RelWithDebInfo
      CMAKE_GENERATOR: ${{matrix.config.CMAKE_GENERATOR}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.config.CMAKE_GENERATOR_PLATFORM}}

      # vcpkg settings
      VCPKG_DISABLE_METRICS: true
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vcpkg_triplet }}
      VCPKG_BINARY_SOURCES: "clear;default,readwrite;nuget,https://tenacityteam.jfrog.io/artifactory/api/nuget/tenacity-nuget,readwrite"

      # Artifactory cache settings
      JFROG_ARTIFACTORY_NUGET_USER: ${{secrets.JFROG_ARTIFACTORY_NUGET_USER}}
      JFROG_ARTIFACTORY_NUGET_PASS: ${{secrets.JFROG_ARTIFACTORY_NUGET_PASS}}
      JFROG_ARTIFACTORY_NUGET_TOKEN: ${{secrets.JFROG_ARTIFACTORY_NUGET_TOKEN}}

      # Apple codesigning
      APPLE_CODESIGN_IDENTITY: ${{ secrets.APPLE_CODESIGN_IDENTITY }}
      APPLE_NOTARIZATION_USER_NAME: ${{ secrets.APPLE_NOTARIZATION_USER_NAME }}
      APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}

      # Windows codesigning
      WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      # WxWidgets info for linux builds
      WX_GIT_URL: https://github.com/wxWidgets/wxWidgets.git
      WX_GIT_REF: v3.1.5

    steps:

    - name: Checkout Git repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Get Git commit of vcpkg submodule
      run: echo VCPKG_COMMIT=$(git ls-tree HEAD vcpkg | awk '{print $3}') >> ${GITHUB_ENV}

    - name: Setup platform specific environmental variables
      run: |
        if [[ ${{runner.os}} == "Windows" ]]; then
          echo "Using Windows specific env vars"
          echo COMPILER_CACHE_PATH=C:\Users\runneradmin\AppData\Local\Mozilla\sccache\cache >> ${GITHUB_ENV}
          echo COMPILER_CACHE=sccache >> ${GITHUB_ENV}
          echo EXE_SUFFIX=.exe >> ${GITHUB_ENV}
          echo VCPKG_CACHE_PATH=C:\Users\runneradmin\AppData\Local\vcpkg >> ${GITHUB_ENV}
          echo CMAKE_C_COMPILER_LAUNCHER=ccache >> ${GITHUB_ENV}
          echo CMAKE_CXX_COMPILER_LAUNCHER=ccache >> ${GITHUB_ENV}
        else
          echo "Using non-Windows env vars"
          echo COMPILER_CACHE_PATH= ~/Library/Caches/ccache >> ${GITHUB_ENV}
          echo COMPILER_CACHE=ccache >> ${GITHUB_ENV}
          echo EXE_SUFFIX= >> ${GITHUB_ENV}
          echo VCPKG_CACHE_PATH=~/.cache/vcpkg >> ${GITHUB_ENV}
          echo CMAKE_C_COMPILER_LAUNCHER=ccache >> ${GITHUB_ENV}
          echo CMAKE_CXX_COMPILER_LAUNCHER=ccache >> ${GITHUB_ENV}
          if [[ ${{runner.os}} == "Linux" ]]; then
            echo WX_INSTALL_DIR=/home/runner/work/tenacity/tenacity/wxwidgets-install >> ${GITHUB_ENV}
            echo WX_CONFIG=/home/runner/work/tenacity/tenacity/wxwidgets-install/bin/wx-config >> ${GITHUB_ENV}
          else
            echo WX_INSTALL_DIR=/Users/runner/work/tenacity/tenacity/wxwidgets-install >> ${GITHUB_ENV}
            echo WX_CONFIG=/Users/runner/work/tenacity/tenacity/wxwidgets-install/bin/wx-config >> ${GITHUB_ENV}
          fi
        fi

    - name: "[macOS] Install Apple codesigning certificates"
      uses: apple-actions/import-codesign-certs@v1
      if: startswith( matrix.config.os, 'macos' ) && github.repository_owner == 'tenacityteam' && github.event_name == 'create' && github.event.ref_type == 'tag'
      with:
        p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
        p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

    - name: "[Windows] Set up MSVC Developer Command Prompt"
      if: runner.os == 'Windows'
      uses: seanmiddleditch/gha-setup-vsdevenv@v3
      with:
        arch: ${{ matrix.config.arch }}

    - name: Install Nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 5.10.0

    - name: "[On Push] Authenticate CI to Github Packages"
      if: github.event_name == 'push' && github.repository_owner == 'tenacityteam'
      run: |
        nuget sources Add -Name Github -Source https://nuget.pkg.github.com/tenacityteam/index.json --username tenacityteam --password ${{ secrets.GITHUB_TOKEN }}
        nuget setapikey tenacityteam:${{ secrets.GITHUB_TOKEN }} -Source Github -ForceEnglishOutput -NonInteractive

    - name: Install dependencies
      run: |
        exec bash "${{ github.workspace }}/scripts/ci/dependencies.sh"

    # Cache the vcpkg executable to avoid having to bootstrap vcpkg every time
    - name: Setup vcpkg cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/vcpkg/vcpkg${{ env.EXE_SUFFIX }}
          ${{ env.VCPKG_CACHE_PATH }}
        key: ${{ matrix.config.name }}-${{ hashFiles('**/vcpkg.json') }}-${{ env.VCPKG_COMMIT }}-${{ github.run_number }}
        restore-keys: |
          ${{ matrix.config.name }}-${{ hashFiles(' **/vcpkg.json') }}-${{ env.VCPKG_COMMIT }}-
          ${{ matrix.config.name }}-${{ hashFiles(' **/vcpkg.json') }}-
          ${{ matrix.config.name }}-

    - name: "[Linux/macOS] Set up wxWidgets cache"
      uses: actions/cache@v2
      id: wxwidgets-cache
      if: runner.os != 'Windows'
      with:
        path: ${{ env.WX_INSTALL_DIR }}
        key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.WX_GIT_URL }}-${{ env.WX_GIT_REF }}

    # FIXME: use wxWidgets from vcpkg for all OSes when bugs are fixed for Linux and macOS
    # https://github.com/microsoft/vcpkg/pull/17111
    - name: "[Linux/macOS] Build and install wxWidgets"
      if: steps.wxwidgets-cache.outputs.cache-hit != 'true' && runner.os != 'Windows'
      run: |
        # wxWidgets' build system does not find dependencies from vcpkg, so use its vendored Git submodules
        git clone --recurse-submodules ${{ env.WX_GIT_URL }}
        cd wxWidgets
        git checkout ${{ env.WX_GIT_REF }}
        cmake  -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}  -D CMAKE_INSTALL_PREFIX=${{ env.WX_INSTALL_DIR }} -B cmake_build
        cmake --build cmake_build
        cmake --install cmake_build
        cd ../

    - name: Set up compiler cache
      uses: actions/cache@v2
      with:
        path: ${{ env.COMPILER_CACHE_PATH }}
        key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ github.head_ref }}-${{ github.run_number }}
        restore-keys: |
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ github.head_ref }}-
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-

    # FIXME: hack around bad SSL certificate, needed to build ffmpeg
    # https://github.com/microsoft/vcpkg/issues/19121
    - name: "[Windows] Install yasm"
      if: runner.os == 'Windows'
      run: |
        mkdir -p "vcpkg/downloads/tools/yasm/1.3.0.6"
        curl -k -o "vcpkg/downloads/tools/yasm/1.3.0.6/yasm.exe" "http://www.tortall.net/projects/yasm/snapshots/v1.3.0.6.g1962/yasm-1.3.0.6.g1962.exe"

    - name: Configure
      run: cmake -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -D CMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/install -D VCPKG=ON -B build

    - name: Build
      run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --verbose

    - name: Print compiler cache stats
      run: ${{ env.COMPILER_CACHE}} -s

    - name: Install
      run: cmake --install build --config ${{ env.CMAKE_BUILD_TYPE }} --verbose

    - name: Package
      run: |
        if [[ ${{runner.os}} == "Windows" ]]; then
          cmake --build build --target innosetup --config ${{ env.CMAKE_BUILD_TYPE }}
        else
          cd build
          cpack -C ${{ env.CMAKE_BUILD_TYPE }} -D CPACK_COMMAND_HDIUTIL=${{ env.CPACK_COMMAND_HDIUTIL }} --verbose
          rm -r /package/_CPack_Packages
        fi
      env:
        # Workaround for CPack hdiutil/ finder service race condition bug
        CPACK_COMMAND_HDIUTIL: ${{ github.workspace }}/scripts/ci/macos/repeat_hdiutil.sh
        # Required on Linux to find wxWidgets libraries installed without a package manager
        WXWIDGETS_LD_LIBRARY_PATH: ${{ env.WX_INSTALL_DIR }}/lib

    - name: Upload package artifact
      uses: actions/upload-artifact@v2
      with:
        name: Tenacity_${{ matrix.config.name }}_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
        path: build/package/*
        if-no-files-found: error

    - name: Upload artifact of vcpkg build logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: vcpkg-logs-${{ runner.os }}
        path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
        if-no-files-found: ignore
